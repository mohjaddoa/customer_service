from langchain.chat_models import ChatOpenAI
from langchain.schema import HumanMessage, SystemMessage, AIMessage
import datetime

# Initialize OpenAI Chat Model
llm = ChatOpenAI(temperature=0, openai_api_key="your_openai_api_key")

# Function to save appointment
def save_appointment(name, date_time):
    with open("appointments.txt", "a") as file:
        file.write(f"{name} | {date_time}\n")
    print("Appointment saved successfully.")

# Main function to handle user interaction
def handle_booking():
    print("Welcome to the Appointment Booking System!")
    
    while True:
        # Get user input
        user_query = input("\nYou: ")
        
        # Define the conversation logic
        messages = [
            SystemMessage(content="You are a helpful assistant for booking appointments. Help the user politely."),
            HumanMessage(content=user_query)
        ]
        
        # Generate response
        response = llm(messages)
        response_text = response.content.strip()
        
        print(f"AI: {response_text}")
        
        # Check if the user wants to book an appointment
        if "book" in user_query.lower() or "appointment" in user_query.lower():
            name = input("Please enter your name: ")
            date_time = input("Please enter the date and time for the appointment (YYYY-MM-DD HH:MM): ")
            
            # Validate and save the appointment
            try:
                date_time_obj = datetime.datetime.strptime(date_time, "%Y-%m-%d %H:%M")
                save_appointment(name, date_time_obj)
                print(f"Appointment confirmed for {name} on {date_time_obj}")
            except ValueError:
                print("Invalid date format. Please try again.")
        
        # Exit condition
        if user_query.lower() in ["exit", "quit"]:
            print("Goodbye!")
            break

# Run the program
if __name__ == "__main__":
    handle_booking()
